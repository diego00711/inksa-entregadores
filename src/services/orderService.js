// inksa-entregadores/src/services/orderService.js - VERS√ÉO COMPLETA

const API_URL = import.meta.env.VITE_API_URL || 'https://inksa-auth-flask-dev.onrender.com';

// ‚úÖ Helper para pegar o token
const getAuthToken = () => {
    return localStorage.getItem('deliveryAuthToken') || localStorage.getItem('token');
};

// ‚úÖ Helper para fazer requisi√ß√µes
const fetchWithAuth = async (url, options = {}) => {
    const token = getAuthToken();
    
    if (!token) {
        throw new Error('Token de autentica√ß√£o n√£o encontrado');
    }
    
    const response = await fetch(url, {
        ...options,
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
            ...options.headers,
        },
    });
    
    if (!response.ok) {
        const errorText = await response.text();
        console.error('Erro na requisi√ß√£o:', {
            url,
            status: response.status,
            statusText: response.statusText,
            error: errorText
        });
        throw new Error(`Erro HTTP! Status: ${response.status}`);
    }
    
    return response.json();
};

// ‚úÖ Aceitar pedido usando endpoint /accept com POST
export const acceptDelivery = async (orderId) => {
    try {
        console.log('üöÄ Aceitando pedido:', orderId);
        
        const response = await fetchWithAuth(`${API_URL}/api/orders/${orderId}/accept`, {
            method: 'POST'
        });
        
        console.log('‚úÖ Pedido aceito com sucesso:', response);
        return response;
    } catch (error) {
        console.error('‚ùå Erro ao aceitar pedido:', error);
        throw error;
    }
};

// ‚úÖ Retirar pedido (com c√≥digo de retirada)
export const pickupOrder = async (orderId, pickupCode) => {
    try {
        console.log('üì¶ Retirando pedido:', orderId);
        
        const response = await fetchWithAuth(`${API_URL}/api/orders/${orderId}/pickup`, {
            method: 'POST',
            body: JSON.stringify({ pickup_code: pickupCode })
        });
        
        console.log('‚úÖ Pedido retirado:', response);
        return response;
    } catch (error) {
        console.error('‚ùå Erro ao retirar pedido:', error);
        throw error;
    }
};

// ‚úÖ Completar entrega (com c√≥digo de entrega)
export const completeDelivery = async (orderId, deliveryCode) => {
    try {
        console.log('üèÅ Completando entrega:', orderId);
        
        const response = await fetchWithAuth(`${API_URL}/api/orders/${orderId}/complete`, {
            method: 'POST',
            body: JSON.stringify({ delivery_code: deliveryCode })
        });
        
        console.log('‚úÖ Entrega completada:', response);
        return response;
    } catch (error) {
        console.error('‚ùå Erro ao completar entrega:', error);
        throw error;
    }
};

/**
 * ‚úÖ NOVO: Buscar pedidos para avaliar (ENTREGADOR)
 * Pedidos que o entregador j√° entregou mas ainda n√£o avaliou o cliente
 */
export const getOrdersToReview = async (signal) => {
    try {
        console.log('üîç [Entregador] Buscando pedidos para avaliar...');
        
        const url = `${API_URL}/api/orders/pending-delivery-review`;
        
        const token = getAuthToken();
        
        if (!token) {
            throw new Error('Token de autentica√ß√£o n√£o encontrado');
        }
        
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
            },
            signal
        });
        
        if (!response.ok) {
            throw new Error(`Erro HTTP! Status: ${response.status}`);
        }
        
        const data = await response.json();
        
        const orders = Array.isArray(data) ? data : [];
        
        console.log(`‚úÖ [Entregador] ${orders.length} pedidos pendentes encontrados`);
        
        return orders;
        
    } catch (error) {
        if (error.name !== 'AbortError') {
            console.error('‚ùå [Entregador] Erro ao buscar pedidos para avaliar:', error);
        }
        throw error;
    }
};

// ‚úÖ Obter detalhes do pedido
export const getOrderDetail = async (orderId) => {
    try {
        return await fetchWithAuth(`${API_URL}/api/orders/${orderId}`);
    } catch (error) {
        console.error('Erro ao buscar detalhes do pedido:', error);
        throw error;
    }
};

// ‚úÖ Buscar pedidos dispon√≠veis para aceitar
export const getAvailableOrders = async () => {
    try {
        return await fetchWithAuth(`${API_URL}/api/orders/available`);
    } catch (error) {
        console.error('Erro ao buscar pedidos dispon√≠veis:', error);
        throw error;
    }
};
